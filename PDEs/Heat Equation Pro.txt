// heat eqn :- a*D^2(u(x,t))x = D(u(x,t))t ; a= conductivity //
// Temperature Not fixed at ends//
clc
clf
L=1 //length of the rod
n=25 // small divisions in length
T=1 //time after which u want to see the results
m=400 // time divisions
a=0.1 //conductivityclc
h=L/n //space stepsize
k=T/m // time stepsize
t=linspace(0,T,m)
x=linspace(0,L,n)
u=zeros(m,n) // creating temperature matrix having entries m*n 
r=a*k/(h^2)
for i=1:m
    u(i,1)=20 // temp at leftmost end of the rod at all times
    u(i,n)=150 //temperature at the other end of the rod at lall times
end
for j=2:n-1
    u(1,j)=0   // boundary condition 
end
//disp(x)
//disp(t)
//disp(u)
for i=1:m-1
    u(i+1,1)=(1-a)*u(i,1)+a*u(i,2)
    u(i+1,n)=(1-a)*u(i,n)+a*u(i,n-1)
    for j=2:n-1
        u(i+1,j)=u(i,j)+r*(u(i,j-1)+u(i,j+1)-2*u(i,j)) //finite difference method
    end 
end
//disp(u)
plot3d(t,x,u)
xlabel('time')
ylabel('space')
zlabel('Temperature')
A=input("If you wanna see the animation , enter a number greater than 5 : ")
if A>5 
    then 
for s=1:5:m
drawlater(); //turn on double buffering so that operations
clf(); //occur in the background
plot(x,u(s,:))
xgrid
xlabel('space')
ylabel('Temperature')
ax = gca();
ax.data_bounds = [0,10;1,150]; //this is the command not to chnage the scale of the graph
drawnow(); //copy the background buffer to the visible buffer
end
plot(x,u(1,:),'r')
xlabel('Along the length of the rod --> (in meters)')
ylabel('Temperature (in Kelvins)')
xgrid
Q=legend('final','initial')
end
